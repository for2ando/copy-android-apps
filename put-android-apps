#!/bin/bash
pname=$(basename "$0")
dname=$(dirname "$0")
dotfile=~/.android-apps
glitchdevs=~/etc/devices.adb-backup-glitch
usage="$pname [OPTIONS] apk APKFILENAME [...]
$pname [OPTIONS] ab ABFILENAME [...]
$pname [OPTIONS] data ARCHIVEFILENAME [...]

OPTIONS
  -s SERIAL
    use device with given serial number (overrides \$ANDROID_SERIAL), same as adb command
  -v|--verbose
    Additional messages are displayed. It has precedence over -q|--quiet|-s|--silent.
  -n|--dryrun
    Only messages displayed, No SAADirectory is made.

SUBCOMAMANDS
  $pname apk APKFILENAME [...]
    Install Android app's APK files to a remote Android device.
    Multiple APK support: if one APK file of a multiple apk set appeared in commandline argument,
    the all correspondent APK are installed used with 'adb install-multiple'. Even if any two
    arguments point to same one APK set, then the installation is done onetime per the APK set.
  $pname ab ABFILENAME [...]
    Install Android app's backuped data image files (that is made with 'adb backup') to a remote
    Android device. There is a known glitch in a execution of 'adb backup' or 'adb restore' on
    some Android device, in such case the device ignores first character of a backup/restore
    password send from the adb host computer by 'adb shell input' command except in case of first
    attempt of backup/restore. When you want to apply this command on such device, you have to
    write the device's name (you can obtain the name from an output of 'adb device -l' command
    as 'model:Pixel_4_XL') in the file: $glitchdevs one at a line.
  $pname data ARCHIVEFILENAME [...]
    Install Android app's data files (that is made with the 'get-android-apps data' command) into
    the /data/data/*/ directory on a remote Android device. This subcommand is EXPERIMENTAL.
"

source "$dname/globmatch.sh"
source "$dname/run.sh"
source "$dname/adbwrappers.sh"
source "$dname/in_args.sh"

## put apps' apk using adb install or adb install-multiple
put_apks() {
  test $# -eq 0 && { echo "$pname apk: .apk file(s) required.">&2; return; }
  
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  declare -a apkset_globs=()
  for apk; do
    prefix=$(expr "$apk" : '\(.*-\)[^-/]*\.apk')
    if [ "$prefix" != "" ]; then
      if in_args "$prefix" "${apkset_globs[@]}"; then continue; fi
      echo -n "$apk: ">&2
      apkset_globs+=("$prefix")
      IFS=$'\n' apks=($(ls "$prefix"*))
      test ${#apks[@]} = 0 && { echo "${prefix}*: file not exist.">&2; continue; }
      echo -n "--> "${apks[@]}": "
      IFS=$'\n' apks_w=($(cygpath -w "${apks[@]}"))
      run_adb install-multiple$opts "${apks_w[@]}"
    else
      echo -n "$apk: ">&2
      test -s "$apk" || { echo "$apk: file not exist or size=0.">&2; continue; }
      IFS=$'\n' apk_w=($(cygpath -w "$apk"))
      run_adb install$opts "${apk_w[@]}"
    fi
  done
}

## put apps' data images using adb restore
put_ab() {
  test $# -eq 0 && { echo "$pname ab: .ab file(s) required.">&2; return; }
  source "$dotfile"

  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  tty -s && {
    echo "$pname: Please unlock the phone. Ok (Press the enter key) ?">&2
    read
  }
  # preparing workaround for some glitch after
  glitch=false
  grep -F -q --line-regexp $(adb-parsedev model) "$glitchdevs" && glitch=true
  if $glitch; then
    set "$1" "$@"
  fi
  for ab; do
    echo -n "$ab: ">&2
    test -s "$ab" || { echo "$ab: file not exist or size=0.">&2; continue; }
    run_adb restore$opts "$(cygpath -w $ab)" >/dev/null &
    sleep 1
    echo >&2
    # workaround for some glitch in between adb backup and sendkey on some devices
    if $glitch; then
      run adb-sendkey -v "0$android_backup_password<tab><tab><enter>"
    else
      run adb-sendkey -v "$android_backup_password<tab><tab><enter>"
    fi
    wait
    echo >&2
  done
}

## put apps' data files into /data/data/PKGNAME/
put_data() {
  test $# -eq 0 && { echo "$pname data: archive file(s) required.">&2; return;}
  source "$dotfile"

  unset opts
  removep=false
  while true; do
    case "$1" in
    -r) removep=true; shift;;
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  remote_tmp=/data/local/tmp
  for archive; do
    echo -n "$archive: ">&2
    pkg=$(basename ${archive%.tar.gz})
    test -s "$archive" || { echo "$archive: file not exist or size=0.">&2; continue; }
    datadir=$(adb_shell pm dump "$pkg"|sed -n '/^ *dataDir=/{s///;p;q;}')
    owner=$(adb_shell su -c ls -ld "$datadir" | awk '{print $2 ":" $3;}')
    
    remote_archive="$remote_tmp/$(basename $archive)"
    rm_remote_archive="run adb_shell rm -f $remote_archive"
    trap "$rm_remote_archive" 2
    run_adb push "$archive" "$remote_tmp"
    $removep && adb_shell su -c rm -rf "$datadir/*" "$datadir/.[!.]*"
    run adb_shell su -c tar -zxvkf "$remote_archive" -C "$datadir"
    trap - 2
    $rm_remote_archive
    
    run adb_shell su -c chown -R "$owner" "$datadir"
    
    echo >&2
  done
}


## main
##

unset serial
verbosep=false
dryrunp=false
while true; do
  case "$1" in
  -s) serial="$2"; shift 2;;
  -v|--verbose) verbosep=true; shift;;
  -n|--dryrun) dryrunp=true; verbosep=true; shift;;
  -*) echo "$pname: $1: unknown option.">&2; shift; exit 1;;
  *) break;;
  esac
done
test $# -eq 0 && { echo "$usage"; exit 0; }
cmd="$1"
shift

#declare -f run _adb number_of_adb_devices list_adb_devices
nadev=$(number_of_adb_devices)
if [ $nadev -eq 0 ]; then
  echo "$pname: No remote adb devices.">&2
  exit 16
elif [ $nadev -ge 2 ]; then
  echo "$pname: Two or more remote adb devices exist. Please use $ANDROID_SERIAL envvar, or -s option.">&2
  exit 17
fi

if remote_cmd_not_exist id; then
  echo "$pname: Unable to dump: No id command on the phone.">&2
  exit 18
fi
if remote_adb_is_rooted; then
  sucmd='sh -c'
elif remote_su_not_exist; then
  #if [ "$cmd" = data ]; then
  #  echo "$pname: Unable to dump: No rooted adbd nor su command on the phone. Solution: TWRP recovery or root the device.">&2
  #  exit 19
  #else
    sucmd='sh -c'
  #fi
else
  sucmd='su -c'
fi

case "$cmd" in
apk) put_apks "$@";;
ab) put_ab "$@";;
data) put_data "$@";;
*) echo "$pname: $cmd: unknown subcommand.">&2; exit 2;;
esac
exit $?
