#!/bin/bash
pname=$(basename "$0")
dname=$(dirname "$0")
dotfile=$(ls ./dot-android-apps 2>/dev/null || echo ~/.android-apps)
glitchlist=$(ls ./adb-backup-glitch.list 2>/dev/null || echo ~/etc/adb-backup-glitch.list)
usage="$pname [OPTIONS] list [-{d|e|s|3}] [-u] [PKG_FILTER [...]]
$pname [OPTIONS] apk PKGNAME [...]
$pname [OPTIONS] ab PKGNAME [...]
$pname [OPTIONS] data PKGNAME [...]
$pname [OPTIONS] listapk [-{d|e|s|3}] [-u] [PKG_FILTER [...]]
$pname [OPTIONS] singleapk APKNAME [...]

OPTIONS
  -s SERIAL
    use device with given serial number (overrides \$ANDROID_SERIAL), same as adb command
  -v|--verbose
    Additional messages are displayed. It has precedence over -q|--quiet|-s|--silent.
  -n|--dryrun
    Only messages displayed, No SAADirectory is made.

SUBCOMAMANDS
  $pname list [-{d|e|s|3}] [-u] [PKG_FILTER [...]]
  $pname listapk [-{d|e|s|3}] [-u] [PKG_FILTER [...]]
    List Android app's package names or APK file names for the packages which
    name contains a string:PKG_FILTER to stdout.
    Suboptions:
      -d: filter to only show disabled packages
      -e: filter to only show enabled packages
      -s: filter to only show system packages
      -3: filter to only show third party packages
      -u: also include uninstalled packages
      PKG_FILTER: package name template
    Notes:
      default: show all packages
      -d -e: same as all packages
      -3 -s: same as all packages
  $pname apk PKGNAME [...]
    Copy Android app's APK files for PKGNAMEs to the current directory.
    Each of APKs has the name as PKGNAME-*.apk, not the original.
  $pname apk APKNAME [...]
    Copy Android app's APK files has designated APKNAME to the current
    directory. The APKNAME must have the format as PKGNAME-*.apk.
  $pname ab PKGNAME [...]
    Get Android app's backup data images for PKGNAMEs to the current directory.
    Each of data files has the name as PKGNAME.ab, which is get by the
    'adb backup' command.
  $pname data PKGNAME [...]
    (requires superuser permission)
    Get Android app's /data/data files' archives for PKGNAMEs to the current
    directory. Each of data files has the name as PKGNAME.tar.gz, which is
    a simply snapshot of current /data/data/PKGNAME directory.
"

source "$dname/globmatch.sh"
source "$dname/run.sh"
source "$dname/adbwrappers.sh"
source "$dname/glitch.sh"

## list apps using pm or cmd package
list_package_names() {
  unset opts
  while true; do
    case "$1" in
    -d|-di|-dis|-disa|-disab|-disabl|-disable|-disabled) opts="$opts -d"; shift;;
    -e|-en|-ena|-enab|-enabl|-enable|-enabled) opts="$opts -e"; shift;;
    -s|-sy|-sys|-syst|-syste|-system) opts="$opts -s"; shift;;
    -3|-3r|-3rd|-3rdp|-3rdpa|-3rdpar|-3rdpart|-3rdparty) opts="$opts -3"; shift;;
    -u|-un|-uni|-unin|-unins|-uninst|-uninsta|-uninstal|-uninstall|-uninstalle|-uninstalled) opts="$opts -u"; shift;;
    -*) echo "$pname list: $1: unknown option.">&2; exit 3;;
    *) break;;
    esac
  done
  
  test "$@" || set ''
  for filter; do
    adb_shell pm list packages$opts "$filter"
  done | sed 's/^package://' | sort | uniq
}

## list APK file names for desinated PKGNAMEs
get_apk_names() {
  test $# -eq 0 && { echo "$pname get_apk_names: Package name(s) required.">&2; return;}
  
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  for pkg; do
    echo -n "$pkg: ">&2
    local apkDir apkPath pkgName
    local apkDirs=$(adb_shell pm path "$pkg" | sed 's/^package://;s/\r$//')
    for apkDir in $apkDirs; do
      for apkPath in $(run adb_shell ls "$apkDir"); do
        pkgName=$(basename $(dirname "$apkPath") | sed 's/^\([^-]*\)-.*$/\1/')
        echo "$pkgName-$(basename $apkPath)"
      done
    done
    echo >&2
  done
}

## list apps' APK files using pm or cmd package
list_apk_names() {
  IFS=$'\n' pkgnames=($(list_package_names "$@"))
  get_apk_names "${pkgnames[@]}"
}

## get each apps' apk using adb pull
get_apks() {
  test $# -eq 0 && { echo "$pname apk: Package name(s) required.">&2; return;}
  
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  for pkg; do
    echo -n "$pkg: ">&2
    local apkPath apkPathes=$(adb_shell pm path "$pkg" | sed 's/^package://;s/\r$//')
    for apkPath in $apkPathes; do
      run_adb pull$opts "$apkPath" &&
        mv $(basename "$apkPath") "$pkg-$(basename $apkPath)"
    done
    echo >&2
  done | grep '^[^[]'
}

## get each apps' apk using adb pull
get_single_apk() {
  test $# -eq 0 && { echo "$pname get_single_apk: APK name(s) required.">&2; return;}
  
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  for apk; do
    local pkgName=$(echo $apk | sed 's/^\([^-]*\)-.*$/\1/')
    local apkName=$(echo $apk | sed 's/^[^-]*-\(.*\)$/\1/')
    echo "$pkgName: $apkName">&2
    local apkPath apkPathes=$(adb_shell pm path "$pkgName" | sed 's/^package://;s/\r$//')
    for apkPath in $apkPathes; do
      test $(basename "$apkPath") = "$apkName" &&
        run_adb pull$opts "$apkPath" &&
         mv "$apkName" "$pkgName-$apkName"
    done
  done
}

## get each apps' data using adb backup
get_ab() {
  test $# -eq 0 && { echo "$pname data: Package name(s) required.">&2;return;}
  source "$dotfile"
  
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  tty -s && {
    echo "$pname: Please unlock the phone. Ok (Press the enter key) ?">&2
    read
  }
  # preparing workaround for some glitch after
  glitchtype=$(get-glitch-type "$devname" "$glitchlist")
  test "$glitchtype" -eq 1 &&
    set "$1" "$@"
  retryp=false
  for pkg; do
    while true; do
      echo -n "$pkg: ">&2
      run_adb backup$opts -f "$pkg.ab" -noapk -noobb -noshared "$pkg" >/dev/null &
      sleep 1
      echo >&2
      # workarounds for some glitch in between adb backup and sendkey on some devices
      if $retryp; then
        run adb-sendkey -v "$android_backup_password<tab><tab><enter>"
      else
        case "$glitchtype" in
        1) run adb-sendkey -v "0$android_backup_password<tab><tab><enter>";;
        2) run adb-sendkey -v "<tab><tab><tab><tab>$android_backup_password<tab><tab><enter>";;
        *) run adb-sendkey -v "$android_backup_password<tab><tab><enter>";;
        esac
      fi

      retryp=false
      wait
      test -s "$pkg.ab" && break
      echo "$pname: $pkg.ab: has size=0. Retry (Y/N) ?">&2
      while read answer; do
        case "$answer" in
        y|Y) break 1;;
        n|N) break 2;;
        *) ;;
        esac
      done
      retryp=true
    done
    echo >&2
  done
}

get_datadir() {
  test $# -ne 2 && {
    echo "$pname: FATAL: get_datadir(): Two argument required.">&2
    exit 255
  }
  pkg="$1"
  pmdump="$2"
  run adb_shell pm dump "$pkg" >"$pmdump"
  fgrep -q "Unable to find package: $pkg" "$pmdump" && {
    echo "$pname: $pkg: package doesn't exist.">&2
    return 1
  }
  sed -n '/^DUMP OF SERVICE package:/,/^DUMP OF /p' "$pmdump" |
    sed -n '/^ *dataDir=/{s///;p;q;}' -
  return 0
}

## get each apps' /data/data directory snapshot using tar
get_data() {
  test $# -eq 0 && { echo "$pname data: Package name(s) required.">&2;return;}
  source "$dotfile"
  
  unset opts
  while true; do
    case "$1" in
    -*) opts="$opts $1"; shift;;
    *) break;;
    esac
  done
  
  pmdump=$(mktemp "$pname-XXXXXXXXXX")
  trap "rm -f $pmdump" EXIT SIGINT SIGHUP SIGQUIT SIGTERM
  
  for pkg; do
    echo -n "$pkg: ">&2
    dstfile=$pkg.tar.gz
    datadir=$(get_datadir "$pkg" "$pmdump") || continue
    #echo -n "datadir=[$datadir]; ">&2
    test -n "$datadir" && adb_return_result $sucmd test -d "$datadir" || {
      echo "remote directory \"$datadir\" is not exist nor readbale.">&2
      continue
    }
    run adb_shell $sucmd tar -cf - -C "$datadir" . | gzip -c >"$dstfile"
    echo >&2
  done
  
  rm -f "$pmdump"
  trap EXIT SIGINT SIGHUP SIGQUIT SIGTERM
}


## main
##

unset serial
verbosep=false
dryrunp=false
while true; do
  case "$1" in
  -s) serial="$2"; shift 2;;
  -v|--verbose) verbosep=true; shift;;
  -n|--dryrun) dryrunp=true; verbosep=true; shift;;
  -*) echo "$pname: $1: unknown option.">&2; shift; exit 2;;
  *) break;;
  esac
done
test $# -eq 0 && { echo "$usage"; exit 0; }
cmd="$1"
shift

nadev=$(number_of_adb_devices)
if [ $nadev -eq 0 ]; then
  echo "$pname: No remote adb devices.">&2
  exit 16
elif [ $nadev -ge 2 ]; then
  echo "$pname: Two or more remote adb devices exist. Please use $ANDROID_SERIAL envvar, or -s option.">&2
  exit 17
fi

if remote_cmd_not_exist id; then
  echo "$pname: Unable to dump: No id command on the phone.">&2
  exit 18
fi
if remote_adb_is_rooted; then
  sucmd='sh -c'
elif remote_su_not_exist; then
  #if [ "$cmd" = data ]; then
  #  echo "$pname: Unable to dump: No rooted adbd nor su command on the phone. Solution: TWRP recovery or root the device.">&2
  #  exit 19
  #else
    sucmd='sh -c'
  #fi
else
  sucmd='su -c'
fi

devname=$(adb-parsedev model) || exit 20

case "$cmd" in
list) list_package_names "$@";;
listapk) list_apk_names "$@";;
apk) get_apks "$@";;
singleapk) get_single_apk "$@";;
ab) get_ab "$@";;
data) get_data "$@";;
*) echo "$pname: $cmd: unknown subcommand.">&2; exit 1;;
esac
exit $?
